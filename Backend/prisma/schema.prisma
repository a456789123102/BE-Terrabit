// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  username     String         @unique
  password     String
  image        String?
  isAdmin      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Addresses    Addresses[]
  Cart         Cart[]
  Order        Order[]
  Thread       Thread[]
  Reply        Reply[]
  Like         Like[]
  Review       Review[]
  Announcement Announcement[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float?
  quantity    Int
  image       String?
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ProductCategory ProductCategory[]
  Cart            Cart[]
  OrderItem       OrderItem[]
  Review          Review[]
  Image           ProductImage[]
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  ProductCategory ProductCategory[]
  Thread          Thread[]
}

model ProductCategory {
  productId  Int
  categoryId Int

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Addresses {
  id        Int      @id @default(autoincrement())
  userId    Int
  street    String
  city      String
  state     String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation field
  user User @relation(fields: [userId], references: [id])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation field
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int      @default(1)
  totalPrice Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation field
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  totalPrice Float?
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Float
  comments  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([productId, userId])
}

model Thread {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  content    String
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  category  Category @relation(fields: [categoryId], references: [id])
  viewCount Int      @default(0)
  replies   Reply[]
  likes     Like[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])
  Like   Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int?
  replyId   Int?
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  thread Thread? @relation(fields: [threadId], references: [id])
  reply  Reply?  @relation(fields: [replyId], references: [id])
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  User User @relation(fields: [userId], references: [id])
}
