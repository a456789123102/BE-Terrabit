generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  username     String         @unique
  password     String
  image        String?
  isActive Boolean @default(true)
  isAdmin      Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Addresses    Addresses[]
  Cart         Cart[]
  Order        Order[]
  Thread       Thread[]
  Reply        Reply[]
  Like         Like[]
  Review       Review[]
  Announcement Announcement[]
  OrderItem    OrderItem[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  price       Float?
  discount    Float?
  finalPrice  Float?
  quantity    Int
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ProductCategory ProductCategory[]
  Cart            Cart[]
  OrderItem       OrderItem[]
  Review          Review[]          // Removed `onDelete` here
  Image           ProductImage[]
}

model Category {
  id              Int               @id @default(autoincrement())
  name            String
  ProductCategory ProductCategory[]
  Thread          Thread[]
}

model ProductCategory {
  productId  Int
  categoryId Int

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId])
}

model Addresses {
  id            Int      @id @default(autoincrement())
  userId        Int
  recipientName String
  street        String
  city          String
  state         String
  zipCode       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order Order[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  name      String
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}


model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int?
  quantity   Int      @default(1)
  totalPrice Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull) // ตั้งค่าเป็น NULL เมื่อ Product ถูกลบ
}


model Order {
  id         Int      @id @default(autoincrement())
  userId     Int
  totalPrice Float?
  status     String   @default("awaiting_slip_upload")
  slipUrl    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  Address     Addresses?  @relation(fields: [addressesId], references: [id])
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  addressesId Int?
}

model OrderItem {
  id          Int      @id @default(autoincrement())
  orderId     Int
  productId   Int?
  productName String
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id], onDelete: SetNull) // ตั้งค่าเป็น NULL เมื่อ Product ถูกลบ
  User        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}


model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  userName String
  rating    Float
  comments  String
  isPublished Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([productId, userId])
}

model Thread {
  id         Int      @id @default(autoincrement())
  userId     Int
  title      String
  content    String
  categoryId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category @relation(fields: [categoryId], references: [id])
  viewCount Int      @default(0)
  replies   Reply[]
  likes     Like[]
}

model Reply {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  Like   Like[]
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int?
  replyId   Int?
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id], onDelete: Restrict)
  thread Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)
  reply  Reply?  @relation(fields: [replyId], references: [id], onDelete: Restrict)
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    Int

  User User @relation(fields: [userId], references: [id], onDelete: Restrict)
}

model Career {
  id          Int      @id @default(autoincrement())
  title       String
  site        String
  description String
  type        String
  location    String
  salary      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}
